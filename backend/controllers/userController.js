//add logic using that we will allow user to create an account or login on website

import userModel from "../models/userModel.js"
import validator from "validator"
import bcrypt from "bcrypt"
import jwt from "jsonwebtoken"

const createToken=(id)=>{//pass userid, use this function to create a token
    return jwt.sign({id},process.env.JWT_SECRET)//provide an object where we will store user's id and provide one jwt secret key, using that jwt will sign data and create token

}

//route for user login
const loginUser=async(req,res)=>{//using this, we can get users email and password and if user is genuine, we will generate a token
    try {
        const {email,password}=req.body
        //if user is not available with this email id, then we will generate a response
        const user=await userModel.findOne({email})//in this we will provide an object with email address, if user is available with this email id, then it will be stored in this variable
        if (!user) {//if user is not available, then generate a response
            return res.json({success:false,message:"User does not exists"}) //generate a response
            
        }

        //if user is available, this function will be executed and match the users password
        const isMatch=await bcrypt.compare(password,user.password)//password we are getting from login form and password saved in db
        if (isMatch) {
            //generate a token and send it to user
            const token=createToken(user._id)//send users id we will get from db
            //generate a response
            res.json({success:true,token})
        }
        else{//if password are not matching
            res.json({success:false,message:"Invalid credentials"})

        }

    } catch (error) {
        console.log(error);
        res.json({success:false,message:error.message})
    }

}//now test api by providing email id and password in json body

//route for user register
const registerUser=async(req,res)=>{
    // res.json({msg:"Register API Working"})
    try {
        const {name,email,password}=req.body//if any one will hit endpoint with these properties, we will receive name, email and password
//checking user already exists or not
        const exists=await userModel.findOne({email})//object with email property//if user is available with this email id, then that user will be stored in this variable
        if (exists) {//exists has any data
            return res.json({success:false,message:"User already exists"}) //generate a response
        }

        //check if users email and password is valid or not
        //validating email format and strong password
        if (!validator.isEmail(email)) {//provide email we will get from req.body, if email is not validated
            return res.json({success:false,message:"Please enter a valid email"})//generate a response   
        }

        if (password.length<8) {
            return res.json({success:false,message:"Please enter a strong password"})//generate a response   
        }

        //if email is valid and password is strong, in that case, we will create an account for user, but before that we should hash the user password and store hashed password in db
        //hashing user password
        // generate a salt
        const salt=await bcrypt.genSalt(10)//creating a salt
        const hashedPassword=await bcrypt.hash(password,salt)//we will get hashed password in the variable which we can store in db

        // using name, email and password, we can create a new user
        const newUser=new userModel({//add one object where we will provide the below properties
            name,
            email,
            password:hashedPassword
        })

        //save user in db
        const user=await newUser.save()//new user will be stored in db

        //now we will provide a token using which user can login in app
        const token=createToken(user._id)//store a token we will create using id property of the user, whenever a user will be created, then in their property, _id will be generated by default and using this id we will generate one token
        //while calling the above function we will pass user._id which is autogenerated in mongodb db
        //now set this token as a response
        res.json({success:true, token})//provide token we have created above


    } catch (error) {
        console.log(error);
        res.json({success:false,message:error.message})//geenrate one response also using the json method
        
    }
}
//now test endpoint in thunderclient localhost://4000/api/user/register
//Route for admin login

//now we will create admin authentication system, using admin email and password in env variable, we will create admin authentication
const adminLogin=async(req,res)=>{//api for admin login
    try {
        const {email,password}=req.body//get users email and password from req.body
        if (email===process.env.ADMIN_EMAIL && password===process.env.ADMIN_PASSWORD) {//if email and password are matching with ADMIN_EMAIL and ADMIN_PASSWORD provided in .env
            //we will create one token and send that token in admin user
            const token=jwt.sign(email+password,process.env.JWT_SECRET)//provide a string email+password and provide jwt secret from .env
            //set token to admin user
            res.json({success:true,token})
            
        }else{//if email or password is not matching
            res.json({success:false,message:"Inavlid credentials"})
        }
    } catch (error) {
        console.log(error);
        res.json({success:false,message:error.message})   
    }
    // using this token, we can authenticate the admin, to authenticate the admin we will create one middleware

}

export {loginUser, registerUser,adminLogin}//used in routes folder